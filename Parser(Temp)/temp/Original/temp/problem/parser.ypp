%language "c++"
%require "3.2"
%define api.value.type variant
%define api.token.constructor
%define parse.assert

%code requires
{
    //#include "parser.tab.hpp"
    #include <iostream>
    #include <string>
    namespace yy
    {
        class parser;
    }
%code{
    namespace yy
    {
        parser::symbol_type yylex();
        // void parser::yyerror(const std::string &msg);
    }
}

%token VAR COL ITYPE
%token IDENTIFIER
%token INTEGER
%token EOL

%type <std::string> type PrimitiveType IDENTIFIER
%type <int> INTEGER    

%%
program:
| program EOL
| program SimpleDeclaration {  }
;

SimpleDeclaration: VariableDeclaration
;

VariableDeclaration: VAR IDENTIFIER COL type {std::cout<<"defined variable " << $2 << " with type " << $4 << std::endl; }

type: IDENTIFIER
| PrimitiveType
;

PrimitiveType: ITYPE { $$ = "int"; }
;

%%

namespace yy
{
    parser::symbol_type yylex()
    {
    	return 0;
    }

    void parser::error(const std::string &msg)
    {
        std::cout << "syntax error" << std::endl;
    }
}



int main()
{
    std::cout <<"it seems I am working :D\n";
    return 0;
}