%require "3.2"
%language "c++"
%define api.value.type variant
%define api.token.constructor
%define parse.assert
%code requires
{
    #include <iostream>
    #include <string>
    #include <vector>
    #include <variant>
}

%code{
#include <stdio.h>
#include <string.h>
#include<iostream>
}



%code{
    yy::parser::symbol_type yy::parser::yylex();
    #include<iostream>
    #include<string>
    //void parser::yyerror(const char *error);
}

%token VAR COL ITYPE
%token IDENTIFIER
%token INTEGER
%token EOL

%type <std::string> type PrimitiveType IDENTIFIER
%type <int> INTEGER    

%%
program:
| program EOL
| program SimpleDeclaration {  }
;

SimpleDeclaration: VariableDeclaration
;

VariableDeclaration: VAR IDENTIFIER COL type {std::cout<<"defined variable " << $2 << " with type " << $4 << std::endl; }

type: IDENTIFIER
| PrimitiveType
;

PrimitiveType: ITYPE { $$ = "int"; }
;

%%


// void parser::yyerror(const std::string& m)
// {
//     std::cout << "syntax error" << std::endl;
// }

yy::parser::symbol_type yy::parser::yylex()
{
	return 0;
}


int main()
{
    //yy::parser p;
    // for now return zero
    return 0;
}