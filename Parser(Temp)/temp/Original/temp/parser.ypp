%require "3.2"
%language "c++"
%define api.value.type variant
%define api.token.constructor
%define parse.assert
%code requires
{
    #include <iostream>
    #include <string>
    #include <vector>
    #include <variant>
}

%code{
#include <stdio.h>
#include <string.h>
#include "Scanner.h"
#include<iostream>
}



%code{
    static parser::symbol_type yylex(parser::semantic_type* yylval);
    #include<iostream>
    #include<string>
    Scanner scanner;
    void yyerror(const char *error);
}

%token VAR COL ITYPE
%token IDENTIFIER
%token INTEGER
%token EOL

%type <std::string> type PrimitiveType IDENTIFIER
%type <int> INTEGER    

%%
program:
| program EOL
| program SimpleDeclaration {  }
;

SimpleDeclaration: VariableDeclaration
;

VariableDeclaration: VAR IDENTIFIER COL type {std::cout<<"defined variable " << $2 << " with type " << $4 << std::endl; }

type: IDENTIFIER
| PrimitiveType
;

PrimitiveType: ITYPE { $$ = "int"; }
;

%%

namespace yy
{
    void yy::parser::yyerror(const std::string& m)
    {
        std::cout << "syntax error" << std::endl;
    }

    static parser::symbol_type yylex(parser::semantic_type* yylval)
    {
    	return scanner.get_next_token(yylval);
    }
}


int main()
{
    yy::parser p;
    scanner.set_file("inp.txt");
    p.set_debug_level (!!getenv ("YYDEBUG"));
    return p.parse ();
}